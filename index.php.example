<?php

require_once 'vendor/autoload.php';
ini_set("xdebug.overload_var_dump", "off");

use igorbunov\Checkbox\CheckboxJsonApi;
use igorbunov\Checkbox\Config;
use igorbunov\Checkbox\Errors\InvalidCredentials;
use igorbunov\Checkbox\Errors\Validation;
use igorbunov\Checkbox\Errors\NoActiveShift;
use igorbunov\Checkbox\Errors\AlreadyOpenedShift;
use igorbunov\Checkbox\Errors\EmptyResponse;
use igorbunov\Checkbox\Models\CashRegisters\CashRegistersQueryParams;
use igorbunov\Checkbox\Models\Shifts\ShiftsQueryParams;
use igorbunov\Checkbox\Models\Receipts\ReceiptsQueryParams;
use igorbunov\Checkbox\Models\Receipts\Discounts\Discounts;
use igorbunov\Checkbox\Models\Receipts\Discounts\DiscountModel;
use igorbunov\Checkbox\Models\Receipts\SellReceipt;
use igorbunov\Checkbox\Models\Receipts\Payments\Payments;
use igorbunov\Checkbox\Models\Receipts\Payments\CardPaymentPayload;
use igorbunov\Checkbox\Models\Receipts\Payments\CashPaymentPayload;
use igorbunov\Checkbox\Models\Receipts\ServiceReceipt;
use igorbunov\Checkbox\Models\Reports\PeriodicalReportQueryParams;
use igorbunov\Checkbox\Models\Reports\ReportsQueryParams;
use igorbunov\Checkbox\Models\Transactions\TransactionsQueryParams;
use igorbunov\Checkbox\Models\Receipts\Goods\Goods;
use igorbunov\Checkbox\Models\Receipts\Goods\GoodItemModel;
use igorbunov\Checkbox\Models\Receipts\Goods\GoodModel;


if (!function_exists('pre')) {
    function pre(){
        $numargs = func_num_args();
        $arguments = func_get_args();

        echo '<pre>';
        for($i = 0; $i < $numargs; $i++){
            var_dump($arguments[$i]);
        }
        echo '</pre>';
    }
}

try {
    $config = new Config([
        Config::API_URL => 'https://dev-api.checkbox.in.ua/api/v1',
        Config::LOGIN => 'some login',
        Config::PASSWORD => 'some password',
        Config::LICENSE_KEY => 'some license key'
    ]);

//    $api = new CheckboxJsonApi($config);
//    $api->signInCashier();
//    $api->signOutCashier();

    $api = (new CheckboxJsonApi())
        ->setConfig($config)
        ->setConnectTimeout(10)
        ->signInCashier();

    // profile (касир) //


//    pre('profile', $api->getCashierProfile());

//    pre('(REMOVED) sign cashier via pin code', $api->signInCashierViaPinCode('some pin code'));
//    pre('(REMOVED) sign cashier via signature', $api->signInCashierViaSignature('some signature in base64'));
//    pre('ping tax service', $api->pingTaxServiceAction());


    // shifts (смены) //


//    pre('cashier shift', $api->getCashierShift());
//    pre('get shift', $api->getShift('d05ceab6-772f-42c2-9cba-4394ba95de75'));

//    pre('get shifts', $api->getShifts());
//
//    pre('get shifts', $api->getShifts(new ShiftsQueryParams(
//        [ShiftsQueryParams::STATUS_CLOSED, ShiftsQueryParams::STATUS_OPENED], false, 2, 0
//    )));

//    pre('start shift', $api->createShift());
//    pre('close shift', $api->closeShift());


    // cash registers (пРРО) //


//    pre('cash registers', $api->getCashRegisters());
//    pre('cash registers', $api->getCashRegisters(new CashRegistersQueryParams(true, 3, 0)));
//
//    pre('cash register', $api->getCashRegister('3e650f3e-09b9-44e4-baea-f40f143cbb00'));
//    pre('cash register', $api->getCashRegister('1c9b7dfb-4ffd-4f40-83da-d9b758c0c29a'));
//    pre('cash register', $api->getCashRegisterInfo());


    // receipts (чеки) //

//    pre('get receipt', $api->getReceipts());

//    pre('get receipt', $api->getReceipts(new ReceiptsQueryParams(
//        '', '', false, 2, 0
//    )));

//    pre('get receipt', $api->getReceipt('c6a66550-44b8-4767-9bb0-66f0123c8efa'));

//    pre('get receipt pdf', $api->getReceiptPdf('c6a66550-44b8-4767-9bb0-66f0123c8efa'));

//    pre('get receipt html', $api->getReceiptHtml('c6a66550-44b8-4767-9bb0-66f0123c8efa'));

//    pre('get receipt text', $api->getReceiptText('c6a66550-44b8-4767-9bb0-66f0123c8efa'));

//    pre('get receipt image', $api->getReceiptQrCodeImage('c6a66550-44b8-4767-9bb0-66f0123c8efa'));
//
//    $rawImageContent = $api->getReceiptQrCodeImage('c6a66550-44b8-4767-9bb0-66f0123c8efa');
//    echo '<img src="data:image/png;base64,' . base64_encode($rawImageContent) . '"/>';

//    pre('all taxes', $api->getAllTaxes());


// простая оплата
/*
         // sale receipt
            $receipt = new SellReceipt(
                'Вася Пупкин',
                'Отдел продаж',
                new Goods(
                    [
                        new GoodItemModel(
                            new GoodModel(
                                'vm-123', // good_id
                                50 * 100, // 50 грн
                                'Биовак'
                            ),
                            1 * 1000
                        ),
                        new GoodItemModel(
                            new GoodModel(
                                'vm-124', // good_id
                                20 * 100, // 20 грн
                                'Биовак 2'
                            ),
                            2 * 1000 // 2 шт
                        )
                    ]
                ),
                'igorbunov.ua@gmail.com',
                new Payments([
                    new CardPaymentPayload(
                        40 * 100 // 40 грн
                    ),
                    new CashPaymentPayload(
                        50 * 100 // 50 грн
                    )
                ])
            );

            pre('create sell receipt 2', $api->createSellReceipt($receipt));
    */
// сложная оплата
/*
    $allTaxes = $api->getAllTaxes(); // получили все налоги
    $tax = $allTaxes->getTaxByLabel('Акцизний збір'); // получили один налог по лейбл
    $goodTaxes = $allTaxes->getTaxesByLabel('ПДВ'); // получили массив налогов по лейбл
    $taxCodes = [];

// подготавливаем массив кодов налогов
    foreach ($goodTaxes->results as $goodTax) {
        $taxCodes[] = $goodTax->code;
    }

    $receipt = new SellReceipt(
        'Вася Пупкин', // имя кассира
        'Отдел продаж', // отдел
        new Goods( // товары
            [
                new GoodItemModel(
                    new GoodModel(
                        'vm-123', // good_id айди товара
                        5000, // 50 грн  цена 100 = 1 грн
                        'Биовак', // название
                        '5р47ле78675е3', // баркод
                        'хидер', // хидер
                        'футер', // футер
                        '', // ktzed
                        $goodTaxes // налоги товара
                    ),
                    1000, // кол-во 1000 = 1 шт
                    new Discounts( // скидки или надбавки
                        [
                            new DiscountModel(
                                DiscountModel::TYPE_DISCOUNT, // скидка или надбавка
                                DiscountModel::MODE_VALUE, // по значению или по проценту
                                100, // 1 грн  сумма скидки/надбавки  100 = 1 грн
                                0, // сумма (не используется в данном sdk)
                                $tax->code, // код налога (подготовили выше)
                                $taxCodes, // массив кодов налога (подготовили выше)
                                'one good discount' // название
                            )
                        ]
                    ),
                    $allTaxes->getTaxesByLabel('Акцизний збір'), // налоги товара
                    false, // возврат товара (false or true)
                    0, // сумма (не используется в данном sdk)
                    '' // айди товара (только если вы загружали список товарв (не используется в данном sdk))
                )
            ]
        ),
        'igorbunov.ua@gmail.com', // кому отправлять чек по почте
        new Payments([ // оплаты
            new CardPaymentPayload( // безналичная оплата
                400, // сумма оплаты 400 = 4 грн
                'beznalichka', // текст оплаты
                0, // code - не знаю для чего (видимо пин код карты)
                '0000 0000 0000 0000' // номер карты
            ),
            new CashPaymentPayload( // наличная оплата
                4300, // сумма оплаты 4300 = 43 грн
                'nalichka' // текст оплаты
            )
        ]),
        new Discounts( // скидки/надбавки на весь чек
            [
                new DiscountModel(
                    DiscountModel::TYPE_DISCOUNT, // скидка или надбавка
                    DiscountModel::MODE_VALUE, // по значению или по проценту
                    200, // 2 грн  сумма скидки/надбавки  200 = 2 грн
                    0, // сумма (не используется в данном sdk)
                    $tax->code, // код налога (подготовили выше)
                    $taxCodes, // массив кодов налога (подготовили выше)
                    'total discount' // название
                )
            ]
        ),
        'check header', // чек хидер
        'check footer', // чек футер
        '45435h543twrege' // баркод
    );

    $saleReceiptResult = $api->createSellReceipt($receipt); // выполняем оплату
pre($saleReceiptResult);
*/
// еще пример сложной оплаты
/*
    $allTaxes = $api->getAllTaxes();
    $tax = $allTaxes->getTaxByLabel('Акцизний збір');
    $goodTaxes = $allTaxes->getTaxesByLabel('ПДВ');
    $taxCodes = [];

    foreach ($goodTaxes->results as $goodTax) {
        $taxCodes[] = $goodTax->code;
    }

    $receipt = new SellReceipt(
        'Вася Пупкин',
        'Отдел продаж',
        new Goods(
            [
                new GoodItemModel(
                    new GoodModel(
                        'vm-123', // good_id
                        5000, // 50 грн
                        'Биовак',
                        '',
                        '',
                        '',
                        '',
                        $goodTaxes
                    ),
                    1000,
                    new Discounts(
                        [
                            new DiscountModel(
                                DiscountModel::TYPE_DISCOUNT,
                                DiscountModel::MODE_VALUE,
                                100, // 1 грн
                                0,
                                $tax->code,
                                $taxCodes,
                                'моя скидка'
                            )
                        ]
                    ),
                    $allTaxes->getTaxesByLabel('Акцизний збір'),
                    false,
                    0,
                    ''
                ),
                new GoodItemModel(
                    new GoodModel(
                        'vm-124', // good_id
                        2000, // 20 грн
                        'Биовак 2',
                        '',
                        '',
                        '',
                        '',
                        $goodTaxes
                    ),
                    2000, // 2 шт
                    new Discounts(
                        [
                            new DiscountModel(
                                DiscountModel::TYPE_EXTRA_CHARGE,
                                DiscountModel::MODE_VALUE,
                                200, // 2 грн
                                0,
                                $tax->code,
                                $taxCodes,
                                'моя надбавка'
                            )
                        ]
                    ),
                    $allTaxes->getTaxesByLabel('Акцизний збір'),
                    false,
                    0,
                    ''
                )
            ]
        ),
        'igorbunov.ua@gmail.com',
        new Payments([
            new CardPaymentPayload(
                4700
            ),
            new CashPaymentPayload(
                4700
            )
        ]),
        new Discounts(
            [
                new DiscountModel(
                    DiscountModel::TYPE_EXTRA_CHARGE,
                    DiscountModel::MODE_VALUE,
                    200, // 2 грн
                    0,
                    $tax->code,
                    $taxCodes,
                    'общая надбавка'
                )
            ]
        )
    );

pre(    $api->createSellReceipt($receipt));
*/


/*
$receipt = new ServiceReceipt(new CashPaymentPayload('5100'));
$receiptResponse = $api->createServiceReceipt($receipt);
sleep(10);
//    pre('service receipt', $receiptResponse);
pre('get receipt html', $api->getReceiptHtml($receiptResponse->id));
*/

/*
$receipt = new ServiceReceipt(new CardPaymentPayload(
    '1000'
));

$receiptResponse = $api->createServiceReceipt($receipt);
sleep(10);
//    pre('service receipt', $receiptResponse);
pre('get receipt html', $api->getReceiptHtml($receiptResponse->id));
*/


    //  reports (отчеты)

//    pre('create x report', $api->createXReport());

//    pre('get report by id', $api->getReport('c15dd25d-6c2f-465c-901d-fa974ecc8e19'));

//    pre('get report text by id', $api->getReportText('e89ca619-6562-46e2-a5ce-5434f1a1ca63'));
//    pre('get report text by id', $api->getReportText('e89ca619-6562-46e2-a5ce-5434f1a1ca63', 60));

//    pre('get periodical report', $api->getPeriodicalReport(
//        new PeriodicalReportQueryParams('2020-10-27 00:00:00', '2020-11-04 13:15:00', 60)
//    ));

//    pre('get reports', $api->getReports(
//        new ReportsQueryParams(
//            '2020-10-27 00:00:00',
//            '2020-11-04 13:15:00',
//            [],
//            false,
//            true,
//            3,
//            0
//        )
//    ));

//    pre('get transactions', $api->getTransactions(
//        new TransactionsQueryParams(
//            [
//                TransactionsQueryParams::STATUS_CREATED,
//                TransactionsQueryParams::STATUS_DONE,
//                TransactionsQueryParams::STATUS_SIGNED
//            ],
//            [
//                TransactionsQueryParams::TYPE_RECEIPT,
//                TransactionsQueryParams::TYPE_SHIFT_OPEN,
//                TransactionsQueryParams::TYPE_Z_REPORT
//            ],
//            2,
//            0
//        )
//    ));

//    pre('get transaction', $api->getTransaction('c301b216-10eb-4b0e-b21a-47dab1b56a64'));

//    pre('update transaction', $api->updateTransaction(
//        'c301b216-10eb-4b0e-b21a-47dab1b56a64',
//        base64_encode('fg4w4gegrg')
//    ));


//    $api->signOutCashier();

} catch (InvalidCredentials $err) {
    pre('creds err', $err->getMessage());
}  catch (EmptyResponse $err) {
    pre('empty response', $err->getMessage(), $err->getTraceAsString());
} catch (Validation $err) {
    pre('valid err', $err->getMessage());
    pre('error detail', $err->getDetail());
} catch (NoActiveShift $err) {
    pre('no shift', $err->getMessage());
} catch (AlreadyOpenedShift $err) {
    pre('opened shift', $err->getMessage());
} catch (\Exception $err) {
    pre('default err', $err->getMessage());
}
